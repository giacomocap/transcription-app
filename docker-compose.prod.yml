services:
  backend:
    env_file:
      - .env # Load the .env file from the root directory
    build:
      context: .
      dockerfile: Dockerfile.backend
    restart: unless-stopped
    ports:
      - '5001:5001'
    command: npm start # Explicitly set the command
    environment:
      - PORT=${PORT:-5001}
      - DB_HOST=${DB_HOST:-db}
      - DB_PORT=${DB_PORT:-5432}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME:-transcription}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_URL=${OPENAI_API_URL}
      - WHISPER_MODEL=${WHISPER_MODEL:-whisper-large-v3-turbo}
      - REFINEMENT_MODEL=${REFINEMENT_MODEL:-llama-3.1-70b-versatile}
      - FAST_REFINEMENT_MODEL=${FAST_REFINEMENT_MODEL:-llama-3.1-8b-instant}
    depends_on:
      - db
      - redis
    volumes:
      - ./backend/uploads:/app/uploads

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    restart: unless-stopped
    ports:
      - '8080:80' # Changed from 80:80 to 8080:80
    depends_on:
      - backend

  diarization:
    build:
      context: ./diarization-service
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - '8001:8000'
    environment:
      - PYTHONUNBUFFERED=1
      - UPLOAD_DIR=/app/uploads
    volumes:
      - ./backend/uploads:/app/uploads
    depends_on:
      - db
      - redis

  worker:
    build:
      context: .
      dockerfile: Dockerfile.backend
    restart: unless-stopped
    command: node dist/worker.js # Changed to use compiled version
    environment:
      - PORT=${PORT:-5001}
      - DB_HOST=${DB_HOST:-db}
      - DB_PORT=${DB_PORT:-5432}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME:-transcription}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_URL=${OPENAI_API_URL}
      - WHISPER_MODEL=${WHISPER_MODEL:-whisper-large-v3-turbo}
      - REFINEMENT_MODEL=${REFINEMENT_MODEL:-llama-3.1-70b-versatile}
      - FAST_REFINEMENT_MODEL=${FAST_REFINEMENT_MODEL:-llama-3.1-8b-instant}
    depends_on:
      - db
      - redis
    volumes:
      - ./backend/uploads:/app/uploads

  cloudflared:
    image: cloudflare/cloudflared
    restart: unless-stopped
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN}
    depends_on:
      - frontend

  db:
    image: postgres:13
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=transcription
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:6
    restart: unless-stopped
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
  redis_data:
